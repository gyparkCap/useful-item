맞습니다. ProcessMessageAsync 메소드가 비동기적으로 실행되며, 이 메소드 안에서 await를 사용하면, 해당 비동기 작업은 별도로 처리됩니다. 이 방식으로 while 루프는 메시지를 계속해서 소비할 수 있습니다.
아래는 이 과정이 어떻게 작동하는지 설명하는 간단한 예시입니다:
비동기 처리 흐름
메시지 소비:
var cr = _consumer.Consume(stoppingToken);를 호출하여 새로운 메시지를 동기적으로 소비합니다.
비동기 처리 시작:
ProcessMessageAsync(cr)를 호출하고 _ =를 사용하여 비동기 처리를 시작합니다. 이 호출은 비동기적으로 ProcessMessageAsync 메소드가 실행되도록 합니다. _ =를 사용하면 이 비동기 작업의 결과를 기다리지 않고 다음 루프로 넘어갑니다.
비동기 작업 실행:
ProcessMessageAsync 메소드 내부에서 await를 사용하면, 해당 비동기 작업이 완료될 때까지 기다립니다. 이 작업은 await가 호출된 위치에서 일시 중지되지만, 이 비동기 작업이 완료되는 동안 다른 메시지를 소비할 수 있습니다.
루프 계속 실행:
while 루프는 ProcessMessageAsync의 완료를 기다리지 않고 계속해서 Consume을 호출하여 다음 메시지를 소비합니다. 이로 인해 메시지 소비와 처리 작업이 병렬로 진행됩니다.


메시지는 파티션 수만큼 병렬처리가 되고 그다음에 비동기 처리를 해줘야 병렬처리됨

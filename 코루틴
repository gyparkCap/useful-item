코룬틴에서 문제가 발생하면 예상치 못한 동작가능 > 코루틴쓸 때는 안에 try, catch로 묶어버리자


네, 맞아요. 일반적으로 메인 쓰레드는 사용자 인터페이스(UI)와의 상호작용에 사용됩니다. 사용자 입력 이벤트를 처리하고 UI 업데이트를 수행하는 등의 작업을 담당합니다. 메인 쓰레드는 앱의 중요한 부분이며, 사용자 경험에 직접적으로 영향을 줍니다.

다른 쓰레드는 일반적으로 백그라운드 작업을 수행하며, 메인 쓰레드와 별도로 실행됩니다. 이러한 백그라운드 쓰레드는 네트워크 요청, 데이터베이스 액세스, 파일 I/O 등의 작업을 담당합니다. 이렇게 함으로써 메인 쓰레드가 차단되거나 멈추는 현상을 방지하고, 사용자에게 부드러운 UI 경험을 제공할 수 있습니다.

따라서 메인 쓰레드는 앱의 주요 작업을 담당하고, 다른 쓰레드는 주로 백그라운드 작업을 담당하게 됩니다. 이러한 구조에서는 일반적으로 메인 쓰레드가 UI와 사용자와의 상호작용을 처리하는 주된 쓰레드이며, 이를 통해 앱의 안정성과 성능을 유지할 수 있습니다.

또한, 코어(Core)에 대한 언급은 맞는데, 메인 쓰레드는 보통 하나의 코어를 차지하고 있습니다. 이것이 의미하는 바는 메인 쓰레드가 일반적으로 UI 처리를 담당하며, 이에 따라 UI 처리에 할당된 코어의 리소스를 사용한다는 것입니다.



아 그럼 잠시 멈추고 쓸려고 할 때 쓰레드로 하면 비용많이 나가니 코루틴으로 멈추고 다른 쓰레드 작업 진행하는거구나


Dispatchers.Default: CPU 바운드 작업을 위한 기본 스레드 풀입니다.
Dispatchers.IO: I/O 바운드 작업을 처리하기 위한 스레드 풀입니다.
Dispatchers.Main: Android 및 UI 기반 애플리케이션에서 UI 업데이트를 위한 메인(UI) 스레드입니다.
Dispatchers.Unconfined: 현재 스레드에서 시작되고, 필요에 따라 다른 스레드로 이동하여 실행되는 디스패처입니다.

현재 실행 중인 쓰레드 확인가능 인텔리 제에:  DEBUG 230671 --- [ parallel-2 ]


에러 레밸은 try-catch 또는 코루틴에 먹힐 수 있다 < try-catch는 필요한 최소 범위에 걸어서 확실하게 에러를 먹어야 한다



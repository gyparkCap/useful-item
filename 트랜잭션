


@Transactional 어노테이션을 진행하면 persistant layer에서 db copy 해와서 쿼리 날리는 것처럼 보임
근데 실제로 db에 적용되는게 아니라서 중간에 에러나면 commit 진행하지않아서 실제 적용되지 않는다
즉 @Transactional 안에 있는 쿼리는 아래 내용 2개가 붙어있다고 생각하면 된다.
        entityManager.excuete(sql_query)
        entityManager.commit()


즉 @Transactional 이용하면 하나의 완성된 코드로 수행되어야 한다 < 중간에 오류나면 롤백

그리고 트랜잭션은 가능한 짧게 필요한 부분 만 거는게 좋음
1. 트랜잭션 거는 이유가 데이터의 일관성 때문인데 트랜잭션을 길게 가져가서 특정 행에 대한 업데이트를 진행할 때 해당 행에 접근하면 db락이 걸림
2. 그리고 트랜잭션 길게 가지고 가면 보용이 증가함
3. 시스템마다 다르겠지만 완벽한 데이터 정합 보단 정말 필요한 곳들 insert 후 insert와 같은 곳에서 사용되어야 한다.

    suspend fun findDifferentProperties(entity1: AdVersion, entity2: AdVersion): Map<String, Pair<Any?, Any?>> {
        val propertiesMap = AdVersion::class.members
            .filterIsInstance<KProperty1<AdVersion, *>>()
            .associateBy({ it.name }, { it.get(entity1) to it.get(entity2) })

        return propertiesMap
            .filter { (_, pair) -> pair.first != pair.second }
            .mapValues { (_, pair) -> pair }
    }
